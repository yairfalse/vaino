# Test workloads for VAINO scanning
---
apiVersion: v1
kind: Namespace
metadata:
  name: test-workloads
  labels:
    environment: test
    managed-by: wgo
---
# Web Application Stack
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: test-workloads
  labels:
    app: frontend
    tier: web
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        tier: web
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        env:
        - name: ENVIRONMENT
          value: "test"
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/conf.d
      volumes:
      - name: config
        configMap:
          name: nginx-config
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: test-workloads
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer
---
# Backend API
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  namespace: test-workloads
  labels:
    app: api
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
        tier: backend
    spec:
      containers:
      - name: api
        image: kennethreitz/httpbin
        ports:
        - containerPort: 80
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: url
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: api-server
  namespace: test-workloads
spec:
  selector:
    app: api
  ports:
  - port: 8080
    targetPort: 80
---
# Database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: test-workloads
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        tier: database
    spec:
      containers:
      - name: postgres
        image: postgres:13-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: testdb
        - name: POSTGRES_USER
          value: testuser
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: test-workloads
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
  clusterIP: None
---
# Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: test-workloads
  labels:
    app: redis
    tier: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        tier: cache
    spec:
      containers:
      - name: redis
        image: redis:6-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: test-workloads
spec:
  selector:
    app: redis
  ports:
  - port: 6379
---
# Message Queue
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: test-workloads
  labels:
    app: rabbitmq
    tier: messaging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
        tier: messaging
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3-alpine
        ports:
        - containerPort: 5672
        - containerPort: 15672
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: admin
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: password
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: test-workloads
spec:
  selector:
    app: rabbitmq
  ports:
  - name: amqp
    port: 5672
  - name: management
    port: 15672
---
# Batch Job
apiVersion: batch/v1
kind: Job
metadata:
  name: data-processor
  namespace: test-workloads
spec:
  template:
    metadata:
      labels:
        app: data-processor
        tier: jobs
    spec:
      containers:
      - name: processor
        image: busybox
        command: ['sh', '-c', 'echo "Processing data..." && sleep 30 && echo "Done!"']
      restartPolicy: Never
  backoffLimit: 4
---
# CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-job
  namespace: test-workloads
spec:
  schedule: "*/5 * * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: backup
            tier: jobs
        spec:
          containers:
          - name: backup
            image: busybox
            command: ['sh', '-c', 'echo "Running backup at $(date)"']
          restartPolicy: OnFailure
---
# ConfigMaps
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: test-workloads
data:
  environment: "test"
  log_level: "debug"
  feature_flags: |
    new_ui=true
    dark_mode=false
    analytics=enabled
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: test-workloads
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
        location /api {
            proxy_pass http://api-server:8080;
        }
    }
---
# Secrets
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: test-workloads
type: Opaque
stringData:
  password: "super-secret-password"
  url: "postgresql://testuser:super-secret-password@postgres:5432/testdb"
---
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-secret
  namespace: test-workloads
type: Opaque
stringData:
  password: "rabbitmq-pass-123"
---
apiVersion: v1
kind: Secret
metadata:
  name: api-keys
  namespace: test-workloads
type: Opaque
stringData:
  stripe_key: "sk_test_1234567890"
  github_token: "ghp_fake_token_123"
  slack_webhook: "https://hooks.slack.com/fake/webhook"
---
# NetworkPolicy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-network-policy
  namespace: test-workloads
spec:
  podSelector:
    matchLabels:
      tier: backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          tier: web
    ports:
    - protocol: TCP
      port: 80
  egress:
  - to:
    - podSelector:
        matchLabels:
          tier: database
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          tier: cache
    ports:
    - protocol: TCP
      port: 6379
---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: test-workloads
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: main-ingress
  namespace: test-workloads
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: test.vaino.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: api-server
            port:
              number: 8080