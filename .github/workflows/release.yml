name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.23'

permissions:
  contents: write
  packages: write

jobs:
  # Pre-release validation
  validate:
    name: Pre-release validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run tests
        run: |
          go test -v ./...

      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

      - name: Check build
        run: |
          go build -v ./cmd/wgo

      - name: Validate tag format
        run: |
          if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid tag format: ${{ github.ref_name }}"
            echo "Expected format: v1.2.3 or v1.2.3-alpha"
            exit 1
          fi

  # Generate completions for packaging
  completions:
    name: Generate shell completions
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        run: go build -o wgo ./cmd/wgo

      - name: Generate completions
        run: |
          mkdir -p completions
          ./wgo completion bash > completions/wgo.bash
          ./wgo completion zsh > completions/wgo.zsh  
          ./wgo completion fish > completions/wgo.fish
          ./wgo completion powershell > completions/wgo.ps1

      - name: Upload completions
        uses: actions/upload-artifact@v4
        with:
          name: completions
          path: completions/

  # Main release with GoReleaser
  release:
    name: Release with GoReleaser
    runs-on: ubuntu-latest
    needs: [validate, completions]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download completions
        uses: actions/download-artifact@v4
        with:
          name: completions
          path: completions/

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
          SCOOP_GITHUB_TOKEN: ${{ secrets.SCOOP_GITHUB_TOKEN }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  # Post-release validation
  validate-release:
    name: Post-release validation
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Download and test release binary
        shell: bash
        run: |
          # Set platform-specific variables
          case "${{ matrix.os }}" in
            ubuntu-latest)
              OS="Linux"
              ARCH="x86_64"
              EXT=""
              ;;
            macos-latest)
              OS="Darwin"
              ARCH="x86_64"
              EXT=""
              ;;
            windows-latest)
              OS="Windows"
              ARCH="x86_64"
              EXT=".exe"
              ;;
          esac
          
          # Download release binary
          TAG="${{ github.ref_name }}"
          BINARY_NAME="wgo_${TAG#v}_${OS}_${ARCH}${EXT}"
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            DOWNLOAD_URL="https://github.com/yairfalse/wgo/releases/download/${TAG}/wgo_${TAG#v}_${OS}_${ARCH}.zip"
            curl -L "$DOWNLOAD_URL" -o release.zip
            unzip release.zip
            chmod +x wgo${EXT}
          else
            DOWNLOAD_URL="https://github.com/yairfalse/wgo/releases/download/${TAG}/wgo_${TAG#v}_${OS}_${ARCH}.tar.gz"
            curl -L "$DOWNLOAD_URL" -o release.tar.gz
            tar -xzf release.tar.gz
            chmod +x wgo${EXT}
          fi
          
          # Test binary
          ./wgo${EXT} version
          ./wgo${EXT} --help

  # Send notifications
  notify:
    name: Send notifications
    runs-on: ubuntu-latest
    needs: [release, validate-release]
    if: always()
    steps:
      - name: Release Success Notification
        if: needs.release.result == 'success' && needs.validate-release.result == 'success'
        run: |
          echo "‚úÖ Release ${{ github.ref_name }} completed successfully!"
          echo "üöÄ All binaries validated and available for download"
          echo "üì¶ Packages will be available in package managers shortly"
          
      - name: Release Failure Notification
        if: failure()
        run: |
          echo "‚ùå Release ${{ github.ref_name }} failed!"
          echo "Please check the workflow logs for details"
          exit 1