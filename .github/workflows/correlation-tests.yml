name: Correlation & Timeline Features

on:
  push:
    paths:
      - 'internal/analyzer/**'
      - 'internal/differ/simple*'
      - 'cmd/wgo/commands/diff_simple.go'
      - 'test/performance/**'
      - 'test/system/**'
      - 'test/e2e/**'
  pull_request:
    paths:
      - 'internal/analyzer/**'
      - 'internal/differ/simple*'
      - 'cmd/wgo/commands/diff_simple.go'
      - 'test/performance/**'
      - 'test/system/**'
      - 'test/e2e/**'
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: true
        default: 'all'
        type: choice
        options:
        - unit
        - performance
        - system
        - e2e
        - all

env:
  GO_VERSION: '1.21'

jobs:
  correlation-unit-tests:
    name: Correlation Unit Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_level == 'unit' || github.event.inputs.test_level == 'all' || github.event.inputs.test_level == ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Get dependencies
      run: go mod download

    - name: Run correlator tests
      run: |
        echo "🧪 Testing correlation engine..."
        go test -v ./internal/analyzer/... -run "Test.*Correlat" -coverprofile=correlator-coverage.out
        
        echo "📊 Correlation test coverage:"
        go tool cover -func=correlator-coverage.out | grep -E "(correlator\.go|total)"

    - name: Run timeline formatter tests
      run: |
        echo "🧪 Testing timeline formatter..."
        go test -v ./internal/analyzer/... -run "Test.*Timeline" -coverprofile=timeline-coverage.out
        
        echo "📊 Timeline formatter coverage:"
        go tool cover -func=timeline-coverage.out | grep -E "(formatter\.go|total)"

    - name: Run simple differ tests
      run: |
        echo "🧪 Testing simple differ..."
        go test -v ./internal/differ/... -run "TestSimpleDiffer" -coverprofile=simple-differ-coverage.out
        
        echo "📊 Simple differ coverage:"
        go tool cover -func=simple-differ-coverage.out | grep -E "(simple\.go|total)"

    - name: Validate correlation patterns
      run: |
        echo "🔍 Validating correlation patterns..."
        
        # Test scaling detection
        echo "  ✓ Testing scaling pattern detection"
        go test -v ./internal/analyzer/... -run "TestCorrelator_DetectScalingGroup"
        
        # Test service deployment correlation
        echo "  ✓ Testing service deployment correlation"
        go test -v ./internal/analyzer/... -run "TestCorrelator_DetectServiceGroup"
        
        # Test config update correlation
        echo "  ✓ Testing config update correlation"
        go test -v ./internal/analyzer/... -run "TestCorrelator_DetectConfigUpdateGroup"
        
        # Test security change correlation
        echo "  ✓ Testing security change correlation"
        go test -v ./internal/analyzer/... -run "TestCorrelator_DetectSecretRotation"
        
        # Test false correlation prevention
        echo "  ✓ Testing false correlation prevention"
        go test -v ./internal/analyzer/... -run "TestCorrelator_AvoidFalseCorrelations"
        
        # Test time window enforcement
        echo "  ✓ Testing time window enforcement"
        go test -v ./internal/analyzer/... -run "TestCorrelator_TimeWindowRespected"

    - name: Upload unit test coverage
      uses: actions/upload-artifact@v4
      with:
        name: correlation-unit-coverage
        path: |
          correlator-coverage.out
          timeline-coverage.out
          simple-differ-coverage.out

  correlation-performance-tests:
    name: Correlation Performance Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_level == 'performance' || github.event.inputs.test_level == 'all' || github.event.inputs.test_level == ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Get dependencies
      run: go mod download

    - name: Run correlation benchmarks
      run: |
        echo "⚡ Running correlation engine benchmarks..."
        go test -v ./test/performance/... -bench=BenchmarkCorrelationEngine -benchtime=5s -benchmem > correlation-bench.txt
        cat correlation-bench.txt

    - name: Run memory benchmarks
      run: |
        echo "⚡ Running memory usage benchmarks..."
        go test -v ./test/performance/... -bench=BenchmarkCorrelationMemory -benchtime=3s -benchmem > memory-bench.txt
        cat memory-bench.txt

    - name: Run timeline benchmarks
      run: |
        echo "⚡ Running timeline formatting benchmarks..."
        go test -v ./test/performance/... -bench=BenchmarkTimelineFormatting -benchtime=3s -benchmem > timeline-bench.txt
        cat timeline-bench.txt

    - name: Run end-to-end workflow benchmarks
      run: |
        echo "⚡ Running end-to-end correlation benchmarks..."
        go test -v ./test/performance/... -bench=BenchmarkEndToEndCorrelation -benchtime=3s -benchmem > e2e-bench.txt
        cat e2e-bench.txt

    - name: Performance requirements check
      run: |
        echo "📊 Checking performance requirements..."
        go test -v ./test/performance/... -run="TestCorrelationPerformanceRequirements" -timeout=10m -short

    - name: Memory usage validation
      run: |
        echo "🧠 Validating memory usage patterns..."
        go test -v ./test/performance/... -run="TestMemoryUsage" -timeout=10m -short

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: correlation-benchmarks
        path: |
          correlation-bench.txt
          memory-bench.txt
          timeline-bench.txt
          e2e-bench.txt

  correlation-system-tests:
    name: Correlation System Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_level == 'system' || github.event.inputs.test_level == 'all' || github.event.inputs.test_level == ''
    needs: correlation-unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Get dependencies
      run: go mod download

    - name: Build WGO binary
      run: |
        echo "🔨 Building WGO binary for system tests..."
        go build -o wgo ./cmd/wgo
        chmod +x wgo
        ./wgo version || echo "Built successfully"

    - name: Test correlation system workflow
      run: |
        echo "🔧 Testing correlation system workflow..."
        go test -v ./test/system/... -run="TestCorrelationSystemWorkflow" -timeout=15m -short

    - name: Test timeline system workflow
      run: |
        echo "🔧 Testing timeline system workflow..."
        go test -v ./test/system/... -run="TestTimelineSystemWorkflow" -timeout=15m -short

    - name: Test correlation accuracy
      run: |
        echo "🔧 Testing correlation accuracy..."
        go test -v ./test/system/... -run="TestCorrelationAccuracy" -timeout=15m -short

    - name: Test confidence levels
      run: |
        echo "🔧 Testing confidence level assignment..."
        go test -v ./test/system/... -run="TestConfidenceLevels" -timeout=15m -short

    - name: Test large scale correlation
      run: |
        echo "🔧 Testing large scale correlation..."
        go test -v ./test/system/... -run="TestLargeScaleCorrelation" -timeout=15m -short

    - name: Test JSON output format
      run: |
        echo "🔧 Testing JSON output format..."
        go test -v ./test/system/... -run="TestJSONOutput" -timeout=15m -short

  correlation-e2e-tests:
    name: Correlation E2E Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_level == 'e2e' || github.event.inputs.test_level == 'all' || github.event_name == 'push'
    needs: [correlation-unit-tests, correlation-system-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Get dependencies
      run: go mod download

    - name: Build WGO binary
      run: |
        echo "🔨 Building WGO binary for E2E tests..."
        go build -o wgo ./cmd/wgo
        chmod +x wgo

    - name: Test E2E correlation workflow
      run: |
        echo "🎯 Testing complete E2E correlation workflow..."
        go test -v ./test/e2e/... -run="TestE2ECorrelationWorkflow" -timeout=20m -short

    - name: Validate CLI integration
      run: |
        echo "🎯 Testing CLI correlation commands..."
        # Test the changes command with correlation
        echo "Testing: wgo changes --since 1h --correlated"
        echo "Testing: wgo changes --since 1h --timeline"
        
        # These would be real tests once CLI is fully implemented
        # ./wgo changes --help
        echo "CLI integration tests skipped - waiting for full CLI implementation"

  correlation-summary:
    name: Correlation Test Summary
    runs-on: ubuntu-latest
    needs: [correlation-unit-tests, correlation-performance-tests, correlation-system-tests, correlation-e2e-tests]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "🎉 Correlation & Timeline Feature Test Summary"
        echo "============================================="
        echo ""
        echo "✅ Unit Tests: ${{ needs.correlation-unit-tests.result }}"
        echo "✅ Performance Tests: ${{ needs.correlation-performance-tests.result }}"
        echo "✅ System Tests: ${{ needs.correlation-system-tests.result }}"
        echo "✅ E2E Tests: ${{ needs.correlation-e2e-tests.result }}"
        echo ""
        echo "📊 Features Validated:"
        echo "  • Smart change correlation with confidence levels"
        echo "  • Timeline visualization of infrastructure changes"
        echo "  • Time-based change detection without baselines"
        echo "  • Performance scaling up to 1000+ changes"
        echo "  • Pattern detection (scaling, deployments, config updates)"
        echo "  • False correlation prevention"
        echo ""
        if [[ "${{ needs.correlation-unit-tests.result }}" == "success" && 
              "${{ needs.correlation-performance-tests.result }}" == "success" && 
              "${{ needs.correlation-system-tests.result }}" == "success" ]]; then
          echo "🚀 All correlation tests passed! Ready for production use."
        else
          echo "❌ Some tests failed. Please review before merging."
          exit 1
        fi