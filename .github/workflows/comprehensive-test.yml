name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive tests daily at 1 AM UTC
    - cron: '0 1 * * *'

env:
  GO_VERSION: '1.22'

jobs:
  # Unit tests with coverage
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21', '1.22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run unit tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic \
          ./internal/... \
          ./pkg/... \
          ./cmd/...
    
    - name: Upload coverage
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.22'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  # System tests for collector integration
  system-tests:
    name: System Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run system integration tests
      run: |
        go test -v -timeout=10m ./test/system/...
    
    - name: Test collector registration
      run: |
        go test -v -run TestCollectorRegistry ./test/system/...
    
    - name: Test collector validation
      run: |
        go test -v -run TestCollectorValidation ./test/system/...

  # E2E tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: system-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      run: go build -o wgo ./cmd/wgo
    
    - name: Run E2E workflow tests
      run: |
        export PATH=$PATH:$(pwd)
        go test -v -timeout=15m ./test/e2e/...
    
    - name: Test basic CLI commands
      run: |
        ./build/wgo --help
        ./build/wgo version
        ./build/wgo scan --help
        ./build/wgo baseline --help
        ./build/wgo diff --help
    
    - name: Test provider listing
      run: |
        ./build/wgo scan 2>&1 | grep -E "(terraform|kubernetes|gcp)" || exit 1

  # Provider-specific tests
  provider-tests:
    name: Provider Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    strategy:
      matrix:
        provider: [terraform, kubernetes, gcp]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      run: go build -o wgo ./cmd/wgo
    
    - name: Test ${{ matrix.provider }} provider
      run: |
        # Test provider help
        ./build/wgo scan --provider ${{ matrix.provider }} --help || true
        
        # Test provider validation
        if [ "${{ matrix.provider }}" = "terraform" ]; then
          # Create dummy state file
          echo '{"version": 4}' > test.tfstate
          ./build/wgo scan --provider terraform --state-file test.tfstate || true
        elif [ "${{ matrix.provider }}" = "kubernetes" ]; then
          ./build/wgo scan --provider kubernetes 2>&1 | grep -i "kubeconfig" || exit 0
        elif [ "${{ matrix.provider }}" = "gcp" ]; then
          ./build/wgo scan --provider gcp 2>&1 | grep -i "project" || exit 0
        fi
    
    - name: Run provider unit tests
      run: |
        go test -v ./internal/collectors/${{ matrix.provider }}/...

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem -run=^$ ./internal/... | tee benchmark.txt
    
    - name: Check for performance regressions
      run: |
        # Simple check for allocation regressions
        if grep -E "allocs/op.*[0-9]{6,}" benchmark.txt; then
          echo "WARNING: High allocation count detected"
        fi

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Gosec
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec-results.sarif ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: gosec-results.sarif

  # Test coverage report
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, system-tests, provider-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Download dependencies
      run: go mod download
    
    - name: Generate full coverage report
      run: |
        go test -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out | tee coverage.txt
        
        # Extract total coverage
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: $COVERAGE%"
        
        # Fail if coverage is below threshold
        if (( $(echo "$COVERAGE < 60" | bc -l) )); then
          echo "Coverage is below 60% threshold"
          exit 1
        fi
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html
          coverage.txt

  # All tests passed
  all-tests-passed:
    name: All Tests Passed
    runs-on: ubuntu-latest
    needs: [unit-tests, system-tests, e2e-tests, provider-tests, performance-tests, security-scan, coverage-report]
    
    steps:
    - name: Tests Summary
      run: |
        echo "✅ All tests passed successfully!"
        echo "- Unit tests: ✓"
        echo "- System tests: ✓"
        echo "- E2E tests: ✓"
        echo "- Provider tests: ✓"
        echo "- Performance tests: ✓"
        echo "- Security scan: ✓"
        echo "- Coverage report: ✓"