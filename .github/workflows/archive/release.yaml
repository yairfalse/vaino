name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Install Dependencies
        run: |
          go mod download
          go install github.com/goreleaser/goreleaser@latest

      - name: Generate Completions
        run: |
          mkdir -p completions
          go run ./cmd/wgo completion bash > completions/wgo.bash
          go run ./cmd/wgo completion zsh > completions/wgo.zsh
          go run ./cmd/wgo completion fish > completions/wgo.fish

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run GoReleaser
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
          SCOOP_GITHUB_TOKEN: ${{ secrets.SCOOP_GITHUB_TOKEN }}
          TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
          TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        run: |
          goreleaser release --clean

  update-install-script:
    name: Update Install Script
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Website Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/wgo-website
          token: ${{ secrets.WEBSITE_GITHUB_TOKEN }}
          path: website

      - name: Update Version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          sed -i "s/LATEST_VERSION=.*/LATEST_VERSION=\"$VERSION\"/" website/static/install.sh
          
      - name: Commit and Push
        working-directory: website
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add static/install.sh
          git commit -m "Update install script to version ${GITHUB_REF#refs/tags/}" || true
          git push || true

  publish-packages:
    name: Publish to Package Managers
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: APT Repository
            script: scripts/publish-apt.sh
          - name: YUM Repository  
            script: scripts/publish-yum.sh
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Release Assets
        uses: robinraju/release-downloader@v1.9
        with:
          latest: true
          fileName: "*.deb"
          out-file-path: "packages"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to ${{ matrix.name }}
        env:
          PACKAGE_SIGNING_KEY: ${{ secrets.PACKAGE_SIGNING_KEY }}
          PACKAGE_REPO_TOKEN: ${{ secrets.PACKAGE_REPO_TOKEN }}
        run: |
          chmod +x ${{ matrix.script }}
          ./${{ matrix.script }}

  verify-installation:
    name: Verify Installation Methods
    needs: [release, publish-packages]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        method: [direct, package-manager]
    steps:
      - name: Test Direct Download (Universal Script)
        if: matrix.method == 'direct'
        shell: bash
        run: |
          curl -sSL https://install.wgo.sh | bash
          wgo version

      - name: Test Homebrew (macOS)
        if: matrix.os == 'macos-latest' && matrix.method == 'package-manager'
        run: |
          brew tap ${{ github.repository_owner }}/wgo
          brew install wgo
          wgo version

      - name: Test APT (Ubuntu)
        if: matrix.os == 'ubuntu-latest' && matrix.method == 'package-manager'
        run: |
          curl -fsSL https://apt.wgo.sh/ubuntu/wgo.gpg | sudo apt-key add -
          echo "deb https://apt.wgo.sh/ubuntu stable main" | sudo tee /etc/apt/sources.list.d/wgo.list
          sudo apt-get update
          sudo apt-get install -y wgo
          wgo version

      - name: Test Chocolatey (Windows)
        if: matrix.os == 'windows-latest' && matrix.method == 'package-manager'
        run: |
          choco install wgo -y
          wgo version