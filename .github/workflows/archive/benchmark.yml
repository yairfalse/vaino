name: Benchmarks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run benchmarks daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Need full history for comparison
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run benchmarks
      run: go test -bench=. -benchmem -run=^$ ./... | tee benchmark.txt
    
    - name: Process benchmark results
      run: |
        echo "ðŸ“Š Benchmark Results Summary" > benchmark-summary.md
        echo "=========================" >> benchmark-summary.md
        echo "" >> benchmark-summary.md
        echo "**Date:** $(date)" >> benchmark-summary.md
        echo "**Commit:** ${{ github.sha }}" >> benchmark-summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> benchmark-summary.md
        echo "" >> benchmark-summary.md
        echo "## Performance Results" >> benchmark-summary.md
        echo "" >> benchmark-summary.md
        echo '```' >> benchmark-summary.md
        grep "^Benchmark" benchmark.txt | head -20 >> benchmark-summary.md
        echo '```' >> benchmark-summary.md
        
        # Extract key metrics
        echo "" >> benchmark-summary.md
        echo "## Key Metrics" >> benchmark-summary.md
        echo "" >> benchmark-summary.md
        
        # Get small state performance
        SMALL_PERF=$(grep "BenchmarkTerraformCollector_ParseSmallState" benchmark.txt | head -1 | awk '{print $3}' | sed 's/ns\/op/ns/' || echo "N/A")
        echo "- Small State (10 resources): **${SMALL_PERF}** per operation" >> benchmark-summary.md
        
        # Get parallel processing performance  
        PARALLEL_PERF=$(grep "BenchmarkTerraformCollector_ParallelProcessing" benchmark.txt | head -1 | awk '{print $3}' | sed 's/ns\/op/ns/' || echo "N/A")
        echo "- Parallel Processing (250 resources): **${PARALLEL_PERF}** per operation" >> benchmark-summary.md
        
        # Get streaming performance
        STREAM_PERF=$(grep "BenchmarkStreamingParser_LargeFile" benchmark.txt | head -1 | awk '{print $3}' | sed 's/ns\/op/ns/' || echo "N/A")
        echo "- Streaming Parser (1000 resources): **${STREAM_PERF}** per operation" >> benchmark-summary.md
        
        echo "" >> benchmark-summary.md
        echo "âœ… All benchmarks completed successfully!" >> benchmark-summary.md
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ github.run_number }}
        path: |
          benchmark.txt
          benchmark-summary.md
        retention-days: 30
    
    - name: Comment benchmark results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('benchmark-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  stress-test:
    name: Stress Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      run: go build -o wgo ./cmd/wgo
    
    - name: Create large test dataset
      run: |
        mkdir -p stress-test
        # Create multiple terraform state files for stress testing
        for i in {1..50}; do
          cp test/fixtures/terraform-state.json stress-test/state-$i.tfstate
        done
    
    - name: Run stress tests
      run: |
        # Test concurrent operations
        for i in {1..10}; do
          ./build/wgo baseline list --config stress-test/config.yaml &
        done
        wait
        
        # Test with large datasets
        ./build/wgo scan --provider terraform --path stress-test/ --config stress-test/config.yaml || true
    
    - name: Check memory usage
      run: |
        # Run with memory profiling
        go test -memprofile=mem.prof -run=^$ -bench=BenchmarkLargeDataset ./... || true
        
        # Check if any memory leaks or excessive usage
        if [ -f mem.prof ]; then
          go tool pprof -text mem.prof | head -20
        fi